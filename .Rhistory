setwd("Y:/R_Projects/09_DevelopingDataProducts/HelloSlidifyWorld")
setwd("Y:/R_Projects/09_DevelopingDataProducts")
setwd("Y:/R_Projects/09_DevelopingDataProducts/PeerAssessment")
library(ISLR); library(ggplot2); library(caret);
data(Wage)
summary(Wage)
install.packages("ISLR")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("caret")
source('~/.active-rstudio-document', echo=TRUE)
str(Wage)
plot(wage)
plot(wage$wage)
wage$wage
plot(Wage$wage)
plot(Wage$wage[Wage$sex == "Female"])
Wage$wage[Wage$sex == "Female"]
Wage$wage[sex == "Female"]
Wage$wage[Wage$sex == Female]
Wage$wage[Wage$sex = Female]
Wage$sex == "Female"
sum(Wage$sex == "Female")
str(Wage)
summary(Wage)
plot(Wage$wage[Wage$race == "White"])
Wage$wage[Wage$race == "White"]
plot(Wage$wage[Wage$race == "White"]$wage)
plot(Wage[Wage$race == "White"]$wage)
Wage[Wage$race == "White"]$wage
Wage[Wage$race == "White"]
Wage
summary(Wage)
sum(Wage[Wage$race == "White"])
[Wage$race == "White"]
sum(Wage[Wage$race == "White",])
Wage[Wage$race == "White",]
Wage$race == "White"
sum(Wage$race == "White")
sum(Wage$race == White)
Wage$race
Wage$race[1,]
Wage$race[1]
data(iris)
iris
summary(iris)
?varImp
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
set.seed(33833)
training <- vowel.train
training$y <- as.factor(training$y)
fit <- train(y ~ ., method="rf", data=training)
varImp(fit)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
set.seed(33833)
training <- vowel.train
training$y <- as.factor(training$y)
fit <- train(y ~ ., method="rf", data=training)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
set.seed(33833)
training <- vowel.train
training$y <- as.factor(training$y)
fit <- train(y ~ ., method="rf", data=training)
install.packages("e1071")
fit <- train(y ~ ., method="rf", data=training)
varImp(fit)
hist(varImp(fit))
histogram(varImp(fit))
df <- varImp(fit)
df
dim(df)
class(df)
df$Overall
df$importance
str(df$importance)
df$importance$Overall
x <- df$importance
str(x)
x
df$importance[0]
df$importance[0,]
df$importance[,]
rownames(df$importance)
summary(fit)
str(fit)
rownames(df$importance)
rownames(df$importance)
?regexp
?regexpr
gsub("x\.", "", x.10")
gsub("x.", "", x.10")
dd
)
)
""
gsub("x.", "", "x.10")
as.integer(gsub("x.", "", "x.10"))
as.integer(gsub("x.", "", rownames(df$importance)))
featureColIndex <- as.integer(gsub("x.", "", rownames(df$importance)))
fit$features
fit$predictors
print(fit)
str(fit)
summary(fit)
fit$votes
summary(fit)$votes
?train
fit$perfNames
fit$perfNames
fit$form
fit$x
fit$x[1]
str(fit$x)
sumamry(fit$x)
summary(fit$x)
summary(fit$y)
fit$y
library(slidify)
setwd("Y:/R_Projects/09_DevelopingDataProducts/PeerAssessment/PeerAssessment_B_Slidify")
library(slidify)
?markdown
library(knitr)
?markdown
library(shiny)
library(lattice)
library(ggplot2)
library(grid)
library(gridExtra)
library(caret)
library(rpart)
library(e1071)
data(iris)
modFit <- train(Species ~ ., method="rpart", data=iris)
irisP <- data.frame(Sepal.Length=numeric(1), Sepal.Width=numeric(1), Petal.Length=numeric(1), Petal.Width=numeric(1), Species=character(1), stringsAsFactors=TRUE)
irisP$Sepal.Length <- 6.0 # Entered by slider
irisP$Sepal.Width <- 3.2 # Entered by slider
irisP$Petal.Length <- 1.5 # Entered by slider
irisP$Petal.Width <- 3.0 # Entered by slider
irisP$Species <- predict(modFit, irisP)
irisP$Species
p1 <- qplot(Sepal.Width, Sepal.Length, col=Species, data=iris, xlab="Sepal width (cm)", ylab="Sepal length (cm)")
p1 <- p1 + ggtitle("Sepal Length vs Width - X makes your sample")
p1 <- p1 + geom_point(aes(x=Sepal.Width, y=Sepal.Length, col=Species), size=5, shape=4, data=irisP)
p2 <- qplot(Petal.Width, Petal.Length, col=Species,data=iris, xlab="Petal width (cm)", ylab="Petal length (cm)")
p2 <- p2 + ggtitle("Petal Length vs Width - X makes your sample")
p2 <- p2 + geom_point(aes(x=Petal.Width, y=Petal.Length, col=Species), size=5, shape=4, data=irisP)
p <- grid.arrange(p1, p2, nrow = 2)
print(p)
p
grid.arrange(p1, p2, nrow = 2)
